//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/PlayerMechanics/Combat/PlayerFightingInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerFightingInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerFightingInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerFightingInput"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""e3892684-5ca3-49ed-b229-3c04b2b5a8eb"",
            ""actions"": [
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""24908566-249b-4053-b1d8-f4e887d49637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bow Charge"",
                    ""type"": ""Button"",
                    ""id"": ""46970701-1c05-4fbe-a627-eb172070e858"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Weapon"",
                    ""type"": ""Value"",
                    ""id"": ""8ba1ab2b-800d-44c1-ace9-2d41da9f76f2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7aad4454-0964-47fa-bc55-e9830d170c24"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9d37a3b-c93c-4531-a1ea-2518752e61b5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bow Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba89c332-4f63-4ed0-bcf0-5d4bbdb8f904"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pausing"",
            ""id"": ""745cb3ba-96e2-4cae-94c5-45ec3f181c71"",
            ""actions"": [
                {
                    ""name"": ""TogglePause"",
                    ""type"": ""Button"",
                    ""id"": ""40fe33eb-ac44-44f7-bed8-3749ba483948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ba6181c-a188-4d96-875f-f0868b6fc8c2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Melee = m_Combat.FindAction("Melee", throwIfNotFound: true);
        m_Combat_BowCharge = m_Combat.FindAction("Bow Charge", throwIfNotFound: true);
        m_Combat_ChangeWeapon = m_Combat.FindAction("Change Weapon", throwIfNotFound: true);
        // Pausing
        m_Pausing = asset.FindActionMap("Pausing", throwIfNotFound: true);
        m_Pausing_TogglePause = m_Pausing.FindAction("TogglePause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Melee;
    private readonly InputAction m_Combat_BowCharge;
    private readonly InputAction m_Combat_ChangeWeapon;
    public struct CombatActions
    {
        private @PlayerFightingInput m_Wrapper;
        public CombatActions(@PlayerFightingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Melee => m_Wrapper.m_Combat_Melee;
        public InputAction @BowCharge => m_Wrapper.m_Combat_BowCharge;
        public InputAction @ChangeWeapon => m_Wrapper.m_Combat_ChangeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Melee.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnMelee;
                @Melee.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnMelee;
                @Melee.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnMelee;
                @BowCharge.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnBowCharge;
                @BowCharge.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnBowCharge;
                @BowCharge.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnBowCharge;
                @ChangeWeapon.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapon;
                @ChangeWeapon.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapon;
                @ChangeWeapon.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnChangeWeapon;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Melee.started += instance.OnMelee;
                @Melee.performed += instance.OnMelee;
                @Melee.canceled += instance.OnMelee;
                @BowCharge.started += instance.OnBowCharge;
                @BowCharge.performed += instance.OnBowCharge;
                @BowCharge.canceled += instance.OnBowCharge;
                @ChangeWeapon.started += instance.OnChangeWeapon;
                @ChangeWeapon.performed += instance.OnChangeWeapon;
                @ChangeWeapon.canceled += instance.OnChangeWeapon;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Pausing
    private readonly InputActionMap m_Pausing;
    private IPausingActions m_PausingActionsCallbackInterface;
    private readonly InputAction m_Pausing_TogglePause;
    public struct PausingActions
    {
        private @PlayerFightingInput m_Wrapper;
        public PausingActions(@PlayerFightingInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePause => m_Wrapper.m_Pausing_TogglePause;
        public InputActionMap Get() { return m_Wrapper.m_Pausing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PausingActions set) { return set.Get(); }
        public void SetCallbacks(IPausingActions instance)
        {
            if (m_Wrapper.m_PausingActionsCallbackInterface != null)
            {
                @TogglePause.started -= m_Wrapper.m_PausingActionsCallbackInterface.OnTogglePause;
                @TogglePause.performed -= m_Wrapper.m_PausingActionsCallbackInterface.OnTogglePause;
                @TogglePause.canceled -= m_Wrapper.m_PausingActionsCallbackInterface.OnTogglePause;
            }
            m_Wrapper.m_PausingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TogglePause.started += instance.OnTogglePause;
                @TogglePause.performed += instance.OnTogglePause;
                @TogglePause.canceled += instance.OnTogglePause;
            }
        }
    }
    public PausingActions @Pausing => new PausingActions(this);
    public interface ICombatActions
    {
        void OnMelee(InputAction.CallbackContext context);
        void OnBowCharge(InputAction.CallbackContext context);
        void OnChangeWeapon(InputAction.CallbackContext context);
    }
    public interface IPausingActions
    {
        void OnTogglePause(InputAction.CallbackContext context);
    }
}
